lm(count ~ Year, data = df)
}
test <- test%>%
mutate(yr_model = map(data, yr_model))
colnames(long)
yr_model <- function(df) {
lm(Count ~ Year, data = df)
}
season_model <- function(df) {
lm(Count ~ season, data = df)
}
mnth_model <- function(df) {
lm(Count ~ mnth, data = df)
}
Weekday_model <- function(df) {
lm(Count ~ Weekday, data = df)
}
hr_model <- function(df) {
lm(Count ~ hr, data = df)
}
test <- test%>%
mutate(yr_model = map(data, yr_model))
test <- test%>%
mutate(season_model = map(data, season_model))
test <- test%>%
mutate(mnth_model = map(data, mnth_model))
test <- test%>%
mutate(Weekday_model = map(data, Weekday_model))
test <- test%>%
mutate(hr_model = map(data, hr_model))
mnth_model <- function(df) {
lm(Count ~ Month, data = df)
}
test <- test%>%
mutate(mnth_model = map(data, mnth_model))
test
tidy(test)
test
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)%>%round(digits=2)
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)%>%round()
test %>%
mutate(tidy = map(yr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term, estimate,p.value)
test %>%
mutate(glance = map(yr_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
test %>%
mutate(glance = map(yr_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
knitr::opts_chunk$set(echo = TRUE, fig.width=12, fig.height = 7)
library(printr)
library(ggthemes)
ALL_model <- function(df) {
lm(Count ~ Year+season+Month+Weekday+hr, data = df)
}
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(ALL_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
library(tidymodels)
library(tidyverse)
library(glmnet)
library(broom)
test
test <- test%>%
mutate(ALL_model = map(data, ALL_model))
tidy1 <- test %>%
mutate(tidy = map(ALL_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)
tidy1
tidy1 <- test %>%
mutate(tidy = map(ALL_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(estimate, p.value)
tidy1
as.data.frame(tidy1)
test %>%
mutate(tidy = map(ALL_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)
tidy1 <- test %>%
mutate(tidy = map(ALL_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term,estimate, p.value)
as.data.frame(tidy1)
values<-as.data.frame(tidy1)
max(values$p.value)
values%>%sort(p.value)
values$p.value%>%sort()
values$p.value%>%sort()%>%round(digits=4)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(ALL_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(yr_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(season_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(mnth_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(Weekday_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(glance = map(hr_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
colnames(long)
long$workingday
long$workingday
colnames(long)
Registerred_model <- function(df) {
lm(Count ~ hr + workingday + yr, data = df)
}
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
colnames(long)
Registerred_model <- function(df) {
lm(Count ~ hr+workingday+Year, data = df)
}
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
colnames(long)
Registerred_model <- function(df) {
lm(Count ~ Year+season+Month+workingday+hr, data = df)
}
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
Registerred_model <- function(df) {
lm(Count ~ Year+season+Month+workingday+hr, data = df)
}
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
last_error()
rlang::last_error()
View(Registerred_model)
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test<- long%>%group_by(Type)%>%nest()
yr_model <- function(df) {
lm(Count ~ Year, data = df)
}
season_model <- function(df) {
lm(Count ~ season, data = df)
}
mnth_model <- function(df) {
lm(Count ~ Month, data = df)
}
Weekday_model <- function(df) {
lm(Count ~ Weekday, data = df)
}
hr_model <- function(df) {
lm(Count ~ hr, data = df)
}
ALL_model <- function(df) {
lm(Count ~ Year+season+Month+Weekday+hr, data = df)
}
Registerred_model <- function(df) {
lm(Count ~ Year+season+Month+workingday+hr, data = df)
}
## Run and attach models to list dataframe, A function would probably work here
test <- test%>%
mutate(yr_model = map(data, yr_model))
test <- test%>%
mutate(season_model = map(data, season_model))
test <- test%>%
mutate(mnth_model = map(data, mnth_model))
test <- test%>%
mutate(Weekday_model = map(data, Weekday_model))
test <- test%>%
mutate(hr_model = map(data, hr_model))
test <- test%>%
mutate(ALL_model = map(data, ALL_model))
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
colnames(long)
test<- long%>%group_by(Type)%>%nest()
yr_model <- function(df) {
lm(Count ~ Year, data = df)
}
season_model <- function(df) {
lm(Count ~ season, data = df)
}
mnth_model <- function(df) {
lm(Count ~ Month, data = df)
}
Weekday_model <- function(df) {
lm(Count ~ Weekday, data = df)
}
hr_model <- function(df) {
lm(Count ~ hr, data = df)
}
ALL_model <- function(df) {
lm(Count ~ Year+season+Month+Weekday+hr, data = df)
}
Registerred_model <- function(df) {
lm(Count ~ Year+season+Month+workingday+hr+weathersit, data = df)
}
## Run and attach models to list dataframe, A function would probably work here
test <- test%>%
mutate(yr_model = map(data, yr_model))
test <- test%>%
mutate(season_model = map(data, season_model))
test <- test%>%
mutate(mnth_model = map(data, mnth_model))
test <- test%>%
mutate(Weekday_model = map(data, Weekday_model))
test <- test%>%
mutate(hr_model = map(data, hr_model))
test <- test%>%
mutate(ALL_model = map(data, ALL_model))
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
colnames(long)
test<- long%>%group_by(Type)%>%nest()
## Define Models
yr_model <- function(df) {
lm(Count ~ Year, data = df)
}
season_model <- function(df) {
lm(Count ~ season, data = df)
}
mnth_model <- function(df) {
lm(Count ~ Month, data = df)
}
Weekday_model <- function(df) {
lm(Count ~ Weekday, data = df)
}
hr_model <- function(df) {
lm(Count ~ hr, data = df)
}
ALL_model <- function(df) {
lm(Count ~ Year+season+Month+Weekday+hr, data = df)
}
Registerred_model <- function(df) {
lm(Count ~ Year+season+Month+workingday+hr+weathersit+atemp+windspeed, data = df)
}
## Run and attach models to list dataframe, A function would probably work here
test <- test%>%
mutate(yr_model = map(data, yr_model))
test <- test%>%
mutate(season_model = map(data, season_model))
test <- test%>%
mutate(mnth_model = map(data, mnth_model))
test <- test%>%
mutate(Weekday_model = map(data, Weekday_model))
test <- test%>%
mutate(hr_model = map(data, hr_model))
test <- test%>%
mutate(ALL_model = map(data, ALL_model))
test <- test%>%
mutate(Registerred_model = map(data, Registerred_model))
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared, AIC, BIC)
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)
test %>%
mutate(glance = map(Registerred_model, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared,adj.r.squared, AIC, BIC)
COLNAMES(long)
colnames(long)
non_time <- function(df) {
lm(Count ~ weathersit+temp+atemp+hum+windspeed, data = df)
}
test <- test%>%
mutate(non_time = map(data, non_time))
test %>%
mutate(glance = map(non_time, broom::glance)) %>%
unnest(glance, .drop = TRUE)%>%select(r.squared,adj.r.squared, AIC, BIC)
# Count ~ Year+season+Month+Weekday+hr
test %>%
mutate(tidy = map(hr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term,estimate, p.value)
test %>%
mutate(tidy = map(hr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term,estimate, p.value)
tidy1 <- test %>%
mutate(tidy = map(hr_model, broom::tidy)) %>%
unnest(tidy, .drop = TRUE)%>%select(term,estimate, p.value)
values<-as.data.frame(tidy1)
View(values)
library(zoo)
zoo(long, seq(from = as.Date(min(long$dtedat)), to = as.Date(max(long$dtedat)), by = 24))
zoo(long, seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 24))
x<-zoo(long, seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 24))
auto.arima(x)
library(forecast)
auto.arima(x)
x<-zoo(long[c(2,16)], seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 24))
ong[c(2,16)]
long[c(2,16)]
x<-zoo(long[c(2,16)], seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 24))
auto.arima(x)
auto.arima(x[2])
x[2]
auto.arima(x[2,])
x[2,]
auto.arima(x[,2])
x[,2]
x<-zoo(long[c(2,16)], seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 1/24))
auto.arima(x[,2])
x[,2]
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
library(tidyverse)
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day
Casual_day<-zoo(Casual_day, seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 1))
Casual_arima<-auto.arima(Casual_day)
Casual_day
Casual_arima<-auto.arima(Casual_day[,3])
Casual_day<-long%>%group_by(Type,dteday)%>%filter(Type=="Casual")
Casual_day
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day
Casual_day<-long%>%group_by(Type,dteday,hr)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day
Casual_day<-long%>%group_by(Type,dteday,hr)%>%summarise(Count=Count)%>%filter(Type=="Casual")
long%>%group_by(Type,dteday,hr)%>%summarise(Count=Count)%>%filter(Type=="Casual")
Casual_day<-zoo(Casual_day, seq(from = as.Date(min(long$dteday)), to = as.Date(max(long$dteday)), by = 1))
Casual_arima<-auto.arima(Casual_day[,3])
knitr::opts_chunk$set(echo = TRUE, fig.width=12, fig.height = 7)
library(printr)
library(ggthemes)
## load Librariries
library(tidyverse)
library(psych)
## load data
hour<-read.csv("hour.csv")
## Clean and create factor variables
cols<-colnames(hour)[3:10]
hour<-hour%>%mutate_at(cols, funs(factor(.)))
hour$dteday<-as.Date(hour$dteday)
levels(hour$season)<-c("Winter","Spring","Summer","Fall")
levels(hour$yr)<-c("2011","2012")
levels(hour$mnth)<-c("Jan","Feb","Mar","Apr","May","June","July","Aug","Sept","Oct","Nov","Dec")
levels(hour$weekday)<-c("Sun","Mon","Tues","Weds","Thurs", "Fri", "Sat")
levels(hour$weathersit)<-c("Nice","Moderate","LightPercipitation","Dangerous")
hour<-hour%>%rename(Year=yr,
Month=mnth,
Total=cnt,
Casual=casual,
Registered=registered,
Holiday=holiday,
Weekday=weekday,
Humidity=hum,
Temperature=temp,
Windspeed=windspeed)
long<-hour%>%gather("Type","Count",15:17)
long$Type<-as.factor(long$Type)
# Packages
library(forecast)
Casual<-long[c(15:16)]%>%filter(Type=="Casual")
Casual<-Casual[2]
Registered<-long[c(15:16)]%>%filter(Type=="Registered")
Registered<-Registered[2]
Total<-long[c(15:16)]%>%filter(Type=="Total")
Total<-Total[2]
casual_ts<-ts(Casual)
Registered_ts<-ts(Registered)
Total_ts<-ts(Total)
Casual_arima<-auto.arima(casual_ts)
autoplot(forecast(Casual_arima, h=72))+
coord_cartesian(xlim = c(700, 750))
str(Casual)
Registered_arima<-auto.arima(Registered_ts)
autoplot(forecast(Registered_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-72, nrow(Casual)+72))
Total_arima<-auto.arima(Total_ts)
autoplot(forecast(Total_arima, h=72))+
coord_cartesian(xlim = c(500, 700))
autoplot(forecast(Casual_arima, h=72))
autoplot(forecast(Registered_arima, h=72))
autoplot(forecast(Total_arima, h=72))
autoplot(forecast(Total_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-72, nrow(Casual)+72))
autoplot(forecast(Registered_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-72, nrow(Casual)+72))
autoplot(forecast(Casual_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-72, nrow(Casual)+72))
autoplot(forecast(Casual_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
autoplot(forecast(Registered_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
autoplot(forecast(Total_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
autoplot(forecast(Casual_arima, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
autoplot(forecast(casual_tbats, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
casual_tbats<-tbats(casual_ts)
autoplot(forecast(casual_tbats, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
Registered_tbats<-tbats(Registered_ts)
autoplot(forecast(Registered_tbats, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
Total_tbats<-tbats(Total_ts)
autoplot(forecast(Total_tbats, h=72))+
coord_cartesian(xlim = c(nrow(Casual)-720, nrow(Casual)+72))
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day<-Casual_day[3]%>%ts(frequency=7)
Casual_arima<-tbats(Casual_day)
autoplot(forecast(Casual_arima, h=90))+
coord_cartesian(xlim = c(nrow(Casual_day)-200, nrow(Casual_day)+30))
autoplot(forecast(Casual_arima, h=90))
day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Registered")
day<-Casual_day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))+
coord_cartesian(xlim = c(nrow(day)-200, nrow(day)+30))
long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Registered")
Casual_day[3]%>%ts(frequency=7)
tbats(Casual_day)
Casual_day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day<-Casual_day[3]%>%ts(frequency=7)
Casual_arima<-tbats(Casual_day)
autoplot(forecast(Casual_arima, h=90))
day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Registered")
day<-day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))
autoplot(forecast(Casual_arima, h=90))+
coord_cartesian(xlim = c(nrow(Casual_day)-200, nrow(Casual_day)+30))
autoplot(forecast(Casual_arima, h=90))
autoplot(forecast(arima, h=90))
day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Total")
day<-day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))
Casual_day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Casual")
Casual_day<-Casual_day[3]%>%ts(frequency=7)
Casual_arima<-tbats(Casual_day)
autoplot(forecast(Casual_arima, h=90))
day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Registered")
day<-day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))
day<-long%>%group_by(Type,dteday)%>%summarise(day_cnt=sum(Count))%>%filter(Type=="Total")
day<-day[3]%>%ts(frequency=7)
arima<-tbats(day)
autoplot(forecast(arima, h=90))
long%>%
group_by(Type,dteday)%>%
mutate(sum=sum(Count))%>%
ggplot(aes(x=sum, y=Month, fill=season))+
geom_boxplot()+
facet_grid(Type~.)+coord_flip()+
theme_fivethirtyeight()+theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab("Ridership")+ylab("Months")
long%>%
group_by(Type,dteday)%>%
mutate(sum=sum(Count))%>%
ggplot(aes(x=sum, y=Month, fill=season))+
geom_boxplot()+
facet_grid(Type~.)+coord_flip()+
theme_fivethirtyeight()+theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())+
xlab("Ridership")+ylab("Months")+ggtitle("Months by Type of Riderhsip")
long%>%
group_by(Type,dteday)%>%
mutate(sum=sum(Count))%>%
ggplot(aes(x=dteday,y=sum, color=Type))+
geom_point(aes(shape=season))+stat_smooth()+
theme_fivethirtyeight()+
xlab("Time")+
ylab("Ridership")+ggtitle("Riderhsip: 2011-2012")
